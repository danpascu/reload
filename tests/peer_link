#!/usr/bin/env python

# SPDX-FileCopyrightText: 2020-present Dan Pascu <dan@aethereal.link>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

import asyncio
import ipaddress
import json
import logging
import random
import ssl
from argparse import ArgumentParser, Namespace
from io import BytesIO
from time import time

import aioice
from OpenSSL import SSL

from reload import link
from reload.configuration import Configuration
from reload.messages import (
    Destination,
    Empty,
    ErrorResponse,
    ForwardingHeader,
    Message,
    MessageContents,
    PingRequest,
    PingResponse,
    SecurityBlock,
    Signature,
    SignatureAndHashAlgorithm,
    SignerIdentity,
)
from reload.messages.datamodel import DestinationType, ErrorCode, HashAlgorithm, ResourceID, SignatureAlgorithm, SignerIdentityType, UInt64

# ruff: noqa: T201

# dummy overlay configuration for testing
configuration = Configuration(instance_name='test.link', sequence=17, initial_ttl=100)  # pyright: ignore[reportCallIssue]


def get_ssl_context(purpose: ssl.Purpose, identity: link.NodeIdentity) -> ssl.SSLContext:
    ctx = ssl.create_default_context(purpose)
    ctx.verify_mode = ssl.CERT_REQUIRED
    ctx.check_hostname = False
    identity.configure(ctx)
    return ctx


def encode_ice_peer(connection: link.DTLSEndpoint) -> bytes:
    ice = connection.ice
    candidates = [candidate.to_sdp() for candidate in ice.local_candidates]
    return json.dumps({'username': ice.local_username, 'password': ice.local_password, 'candidates': candidates}).encode()


def decode_ice_peer(data: bytes) -> link.ICEPeer:
    json_data = json.loads(data)
    json_data['candidates'] = [aioice.candidate.Candidate.from_sdp(line) for line in json_data['candidates']]
    return link.ICEPeer(**json_data)


def decode_request(message: bytes) -> tuple[ForwardingHeader, MessageContents, SecurityBlock]:
    buffer = BytesIO(message)
    header = ForwardingHeader.from_wire(buffer)
    contents = MessageContents.from_wire(buffer)
    security_block = SecurityBlock.from_wire(buffer)
    rest = buffer.read()
    if rest:
        raise ValueError(f'{len(rest)} bytes left unprocessed at the end of the message!!!')
    return header, contents, security_block


def make_security_block() -> SecurityBlock:
    signer_identity = SignerIdentity(type=SignerIdentityType.none, identity=Empty())
    signature = Signature(algorithm=SignatureAndHashAlgorithm(hash=HashAlgorithm.sha256, signature=SignatureAlgorithm.rsa), identity=signer_identity, value=b'')
    return SecurityBlock(certificates=[], signature=signature)


class TestClient:
    def __init__(self, *, tls_user: str, dtls_user: str, host: str = 'localhost', port: int = 10000) -> None:
        self.host = host
        self.port = port
        self.tls_user = tls_user
        self.dtls_user = dtls_user
        self.tls_identity = link.NodeIdentity(certificate_file=f'certs/{tls_user}.crt', private_key_file=f'certs/{tls_user}.key', authority_file='certs/ca.crt')
        self.dtls_identity = link.NodeIdentity(certificate_file=f'certs/{dtls_user}.crt', private_key_file=f'certs/{dtls_user}.key', authority_file='certs/ca.crt')
        self.ssl_context = get_ssl_context(ssl.Purpose.SERVER_AUTH, self.tls_identity)

    async def run(self) -> None:
        addr = address_repr(self.host)
        port = self.port
        print(f'connecting to {addr}:{port} w/ identity {self.tls_user}/{self.dtls_user}')
        try:
            async with asyncio.timeout(3):
                reader, writer = await asyncio.open_connection(self.host, self.port, ssl=self.ssl_context, ssl_handshake_timeout=1)
        except TimeoutError:
            print('connection did timeout')
            return
        except (OSError, ssl.SSLError) as e:
            print(f'error connecting: {e}')
            return

        print(f'connected to {addr}:{port}')
        print('exchanging ICE parameters')

        connection = link.DTLSEndpoint(purpose=link.Purpose.AttachRequest, identity=self.dtls_identity)

        await connection.prepare()

        try:
            writer.write(encode_ice_peer(connection))
            await writer.drain()

            data = await reader.read(4096)
            if not data:
                writer.close()
                await writer.wait_closed()
                print('connection lost')
                return

            ice_peer = decode_ice_peer(data)

            writer.close()
            await writer.wait_closed()
        except (ConnectionError, ConnectionResetError, ConnectionAbortedError) as exc:
            writer.close()
            await writer.wait_closed()
            print(exc)
            return

        print('initiating ICE probing')
        try:
            await connection.connect(ice_peer)
        except (ConnectionError, SSL.Error, TimeoutError) as exc:
            print(f'ICE+DTLS connection failed: {exc!r}')
            return

        print('ICE+DTLS connection established')

        async with connection:
            await self.exchange_messages(connection)

        print('connection closed')

    async def exchange_messages(self, connection: link.DTLSEndpoint) -> None:
        message = self.make_ping_request()
        print(f'sending Ping request {message!r}')
        await connection.send(message)
        message = await connection.receive()
        print(f'received back: {message!r}')
        self.process_response(message)

    @staticmethod
    def make_ping_request() -> bytes:
        contents = MessageContents.for_message(PingRequest())
        security_block = make_security_block()
        target = Destination(type=DestinationType.resource, data=ResourceID.for_resource('test'))
        header = ForwardingHeader.new(configuration=configuration, fragment=0xc000_0000, transaction_id=1234, via_list=[], destination_list=[target], options=[])
        header.length = header.wire_length() + contents.wire_length() + security_block.wire_length()
        return header.to_wire() + contents.to_wire() + security_block.to_wire()

    @staticmethod
    def process_response(message: bytes) -> None:
        try:
            _, contents, _ = decode_request(message)
            response = Message[contents.code].from_wire(contents.body)
        except (KeyError, ValueError) as e:
            print(f'cannot decode message: {e!s}')
        else:
            print(f'received {response.__class__.__name__} with {vars(response)}')


class TestServer:
    def __init__(self, *, tls_user: str, dtls_user: str, host: str = '', port: int = 10000) -> None:
        self.host = host
        self.port = port
        self.tls_user = tls_user
        self.dtls_user = dtls_user
        self.tls_identity = link.NodeIdentity(certificate_file=f'certs/{tls_user}.crt', private_key_file=f'certs/{tls_user}.key', authority_file='certs/ca.crt')
        self.dtls_identity = link.NodeIdentity(certificate_file=f'certs/{dtls_user}.crt', private_key_file=f'certs/{dtls_user}.key', authority_file='certs/ca.crt')
        self.ssl_context = get_ssl_context(ssl.Purpose.CLIENT_AUTH, self.tls_identity)
        # self.ssl_context.sni_callback = self.sni_callback  # noqa: ERA001

    async def run(self) -> None:
        server = await asyncio.start_server(self._handler, self.host, self.port, ssl=self.ssl_context)

        addr = self.host or '*'
        port = server.sockets[0].getsockname()[1]
        print(f'Listening on {address_repr(addr)}:{port} w/ identity {self.tls_user}/{self.dtls_user}')

        async with server:
            try:
                await server.serve_forever()
            except Exception as e:
                print(e)
                raise

    async def _handler(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter) -> None:
        addr, port, *_ = writer.get_extra_info('peername')
        print(f'connection from {address_repr(addr)}:{port}')
        print('exchanging ICE parameters')

        connection = link.DTLSEndpoint(purpose=link.Purpose.AttachResponse, identity=self.dtls_identity)

        await connection.prepare()

        try:
            writer.write(encode_ice_peer(connection))
            await writer.drain()

            data = await reader.read(4096)
            if not data:
                writer.close()
                await writer.wait_closed()
                print('connection lost')
                return

            ice_peer = decode_ice_peer(data)

            writer.close()
            await writer.wait_closed()
        except (ConnectionError, ConnectionResetError, ConnectionAbortedError) as exc:
            writer.close()
            await writer.wait_closed()
            print(exc)
            return

        print('initiating ICE probing')
        try:
            await connection.connect(ice_peer)
        except (ConnectionError, SSL.Error, TimeoutError) as exc:
            print(f'ICE+DTLS connection failed: {exc!r}')
            return

        print('ICE+DTLS connection established')

        async with connection:
            await self.exchange_messages(connection)

        print('connection closed')

    async def exchange_messages(self, connection: link.DTLSEndpoint) -> None:
        async for message in connection:
            print(f'received message: {message!r}')
            response = self.process_request(message)
            print(f'sending response {response!r}')
            await connection.send(response)

    def process_request(self, message: bytes) -> bytes:
        try:
            _, contents, _ = decode_request(message)
            request = Message[contents.code].from_wire(contents.body)
        except (KeyError, ValueError) as e:
            print(f'cannot decode message: {e!s}')
            return self.make_error_response(ErrorCode.InvalidMessage)
        else:
            if isinstance(request, PingRequest):
                print('returning Ping response')
                return self.make_response(PingResponse(id=random.getrandbits(64), time=UInt64(time() * 1000)))
            return self.make_error_response(ErrorCode.InvalidMessage)

    def make_error_response(self, code: ErrorCode) -> bytes:
        return self.make_response(ErrorResponse(code=code))

    @staticmethod
    def make_response(response: Message) -> bytes:
        contents = MessageContents.for_message(response)
        security_block = make_security_block()
        header = ForwardingHeader.new(configuration=configuration, fragment=0xc000_0000, transaction_id=1234, via_list=[], destination_list=[], options=[])
        header.length = header.wire_length() + contents.wire_length() + security_block.wire_length()
        return header.to_wire() + contents.to_wire() + security_block.to_wire()

    @staticmethod
    def sni_callback(ssl_object: ssl.SSLObject, server_name: str, ssl_context: ssl.SSLContext) -> None:
        print(f'SNI: {server_name!r} {ssl_context} {ssl_object.server_side}')


def run_client(args: Namespace) -> None:
    client = TestClient(tls_user=args.tls_user or 'user-2', dtls_user=args.dtls_user or args.tls_user or 'user-2', host=args.address or 'localhost', port=args.port)
    asyncio.run(client.run(), debug=args.debug)


def run_server(args: Namespace) -> None:
    server = TestServer(tls_user=args.tls_user or 'user-1', dtls_user=args.dtls_user or args.tls_user or 'user-1', host=args.address, port=args.port)
    asyncio.run(server.run(), debug=args.debug)


def address_repr(address: str) -> str:
    return f'[{address}]' if ':' in address else address


def address(value: str) -> str:
    return str(ipaddress.ip_address(value)) if value else value


def main() -> None:
    parser = ArgumentParser()
    parser.add_argument('tls_user', nargs='?', type=str, help='the user will determine the X509 certificate that will be used for TLS')
    parser.add_argument('dtls_user', nargs='?', type=str, help='if specified, use a different user for DTLS, otherwise same as TLS')
    parser.add_argument('-a', '--addr', dest='address', default='', help='Use this address for the TLS connection', metavar='ADDR')
    parser.add_argument('-p', '--port', type=int, default=10000, help='Use this port for the TLS connection (default is 10000)')
    parser.add_argument('-c', '--client', action='store_true', help='run as a client (by default it runs as a server)')
    parser.add_argument('-d', '--debug', action='store_true', help='turn on debugging messages')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)
    aioice.ice.logger.setLevel(logging.DEBUG if args.debug else logging.WARNING)  # shut aioice up

    try:
        if args.client:
            run_client(args)
        else:
            run_server(args)
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
