#!/usr/bin/env python

# SPDX-FileCopyrightText: 2020-present Dan Pascu <dan@aethereal.link>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

import asyncio
import ipaddress
import json
import logging
import random
import ssl
from argparse import ArgumentParser, Namespace
from functools import cached_property
from io import BytesIO
from time import time
from typing import cast

import aioice
import trustme
from OpenSSL import SSL
from reload import link
from reload.configuration import Configuration
from reload.messages import (
    Destination,
    Empty,
    ErrorResponse,
    ForwardingHeader,
    Message,
    MessageContents,
    PingRequest,
    PingResponse,
    SecurityBlock,
    Signature,
    SignatureAndHashAlgorithm,
    SignerIdentity,
)
from reload.messages.datamodel import DestinationType, ErrorCode, HashAlgorithm, ResourceID, SignatureAlgorithm, SignerIdentityType, UInt64

# ruff: noqa: T201

# dummy overlay configuration for testing
configuration = Configuration(instance_name='test.com', sequence=17, initial_ttl=100)  # pyright: ignore[reportCallIssue]


class TestIdentity:
    def __init__(self) -> None:
        self.authority = trustme.CA()
        self.certificate = self.authority.issue_cert('test.com')

    @cached_property
    def _key(self) -> int:
        return hash(self.certificate.private_key_and_cert_chain_pem.bytes())

    def __repr__(self) -> str:
        return f'{self.__class__.__name__}()'

    def __hash__(self) -> int:
        return hash(self._key)

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TestIdentity):
            return self._key == other._key
        return NotImplemented

    def configure(self, context: SSL.Context) -> None:
        context.set_verify(SSL.VERIFY_NONE)
        self.authority.configure_trust(context)
        self.certificate.configure_cert(context)


def get_ssl_context(purpose: ssl.Purpose) -> ssl.SSLContext:
    ctx = ssl.create_default_context(purpose)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    authority = trustme.CA()
    certificate = authority.issue_cert('test.com')
    authority.configure_trust(ctx)
    certificate.configure_cert(ctx)
    return ctx


def encode_ice_peer(connection: link.DTLSEndpoint) -> bytes:
    ice = connection.ice
    candidates = [candidate.to_sdp() for candidate in ice.local_candidates]
    return json.dumps({'username': ice.local_username, 'password': ice.local_password, 'candidates': candidates}).encode()


def decode_ice_peer(data: bytes) -> link.ICEPeer:
    json_data = json.loads(data)
    json_data['candidates'] = [aioice.candidate.Candidate.from_sdp(line) for line in json_data['candidates']]
    return link.ICEPeer(**json_data)


def decode_request(message: bytes) -> tuple[ForwardingHeader, MessageContents, SecurityBlock]:
    buffer = BytesIO(message)
    header = ForwardingHeader.from_wire(buffer)
    contents = MessageContents.from_wire(buffer)
    security_block = SecurityBlock.from_wire(buffer)
    rest = buffer.read()
    if rest:
        raise ValueError(f'{len(rest)} bytes left unprocessed at the end of the message!!!')
    return header, contents, security_block


def make_security_block() -> SecurityBlock:
    signer_identity = SignerIdentity(type=SignerIdentityType.none, identity=Empty())
    signature = Signature(algorithm=SignatureAndHashAlgorithm(hash=HashAlgorithm.sha256, signature=SignatureAlgorithm.rsa), identity=signer_identity, value=b'')
    return SecurityBlock(certificates=[], signature=signature)


class TestClient:
    def __init__(self, host: str, port: int = 10000) -> None:
        self.host = host
        self.port = port
        self.ssl_context = get_ssl_context(ssl.Purpose.SERVER_AUTH)
        self.identity = cast(link.NodeIdentity, TestIdentity())

    async def run(self) -> None:
        try:
            async with asyncio.timeout(3):
                reader, writer = await asyncio.open_connection(self.host, self.port, ssl=self.ssl_context, ssl_handshake_timeout=1)
        except TimeoutError:
            print('connection did timeout')
            return
        except (OSError, ssl.SSLError) as e:
            print(f'error connecting: {e}')
            return

        print(f'connected to {self.host}:{self.port}')
        print('exchanging ICE parameters')

        connection = link.DTLSEndpoint(purpose=link.Purpose.AttachRequest, identity=self.identity)

        await connection.prepare()
        writer.write(encode_ice_peer(connection))
        data = await reader.read(4096)
        ice_peer = decode_ice_peer(data)
        await writer.drain()
        writer.close()

        print('initiating ICE probing')
        await connection.connect(ice_peer)

        print('ICE+DTLS connection established')

        await self.exchange_messages(connection)

        await connection.close()
        print('connection closed')

    async def exchange_messages(self, connection: link.DTLSEndpoint) -> None:
        message = self.make_ping_request()
        print(f'sending Ping request {message!r}')
        await connection.send(message)
        message = await connection.receive()
        print(f'received back: {message!r}')
        self.process_response(message)

    @staticmethod
    def make_ping_request() -> bytes:
        contents = MessageContents.for_message(PingRequest())
        security_block = make_security_block()
        target = Destination(type=DestinationType.resource, data=ResourceID.for_resource('test'))
        header = ForwardingHeader.new(configuration=configuration, fragment=0xc000_0000, transaction_id=1234, via_list=[], destination_list=[target], options=[])
        header.length = header.wire_length() + contents.wire_length() + security_block.wire_length()
        return header.to_wire() + contents.to_wire() + security_block.to_wire()

    @staticmethod
    def process_response(message: bytes) -> None:
        try:
            _, contents, _ = decode_request(message)
            response = Message[contents.code].from_wire(contents.body)
        except (KeyError, ValueError) as e:
            print(f'cannot decode message: {e!s}')
        else:
            print(f'received {response.__class__.__name__} with {vars(response)}')


class TestServer:
    def __init__(self, host: str, port: int = 10000) -> None:
        self.host = host
        self.port = port
        self.ssl_context = get_ssl_context(ssl.Purpose.CLIENT_AUTH)
        self.identity = cast(link.NodeIdentity, TestIdentity())
        # self.ssl_context.sni_callback = self.sni_callback  # noqa: ERA001

    async def run(self) -> None:
        server = await asyncio.start_server(self._handler, self.host, self.port, ssl=self.ssl_context)

        port = server.sockets[0].getsockname()[1]
        print(f'Serving on {self.host or "*"}:{port}')

        async with server:
            try:
                await server.serve_forever()
            except Exception as e:
                print(e)
                raise

    async def _handler(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter) -> None:
        host, port, *_ = writer.get_extra_info('peername')
        print(f'connection from {host}:{port}')
        print('exchanging ICE parameters')

        connection = link.DTLSEndpoint(purpose=link.Purpose.AttachResponse, identity=self.identity)

        await connection.prepare()
        writer.write(encode_ice_peer(connection))
        data = await reader.read(4096)
        ice_peer = decode_ice_peer(data)
        await writer.drain()
        writer.close()

        print('initiating ICE probing')
        await connection.connect(ice_peer)

        print('ICE+DTLS connection established')

        await self.exchange_messages(connection)

        await connection.close()
        print('connection closed')

    async def exchange_messages(self, connection: link.DTLSEndpoint) -> None:
        async for message in connection:
            print(f'received message: {message!r}')
            response = self.process_request(message)
            print(f'sending response {response!r}')
            await connection.send(response)

    def process_request(self, message: bytes) -> bytes:
        try:
            _, contents, _ = decode_request(message)
            request = Message[contents.code].from_wire(contents.body)
        except (KeyError, ValueError) as e:
            print(f'cannot decode message: {e!s}')
            return self.make_error_response(ErrorCode.InvalidMessage)
        else:
            if isinstance(request, PingRequest):
                print('returning Ping response')
                return self.make_response(PingResponse(id=random.getrandbits(64), time=UInt64(time() * 1000)))
            return self.make_error_response(ErrorCode.InvalidMessage)

    def make_error_response(self, code: ErrorCode) -> bytes:
        return self.make_response(ErrorResponse(code=code))

    @staticmethod
    def make_response(response: Message) -> bytes:
        contents = MessageContents.for_message(response)
        security_block = make_security_block()
        header = ForwardingHeader.new(configuration=configuration, fragment=0xc000_0000, transaction_id=1234, via_list=[], destination_list=[], options=[])
        header.length = header.wire_length() + contents.wire_length() + security_block.wire_length()
        return header.to_wire() + contents.to_wire() + security_block.to_wire()

    @staticmethod
    def sni_callback(ssl_object: ssl.SSLObject, server_name: str, ssl_context: ssl.SSLContext) -> None:
        print(f'SNI: {server_name!r} {ssl_context} {ssl_object.server_side}')


def run_client(args: Namespace) -> None:
    client = TestClient(args.address)
    asyncio.run(client.run(), debug=args.debug)


def run_server(args: Namespace) -> None:
    server = TestServer(args.address)
    asyncio.run(server.run(), debug=args.debug)


def address(value: str) -> str:
    return str(ipaddress.ip_address(value)) if value else value


def main() -> None:
    parser = ArgumentParser()
    parser.add_argument('address', nargs='?', type=address, help='the address to connect to (run as server when not specified)')
    parser.add_argument('-d', '--debug', action='store_true', help='turn on debugging messages')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)
    aioice.ice.logger.setLevel(logging.DEBUG if args.debug else logging.WARNING)  # shut aioice up

    try:
        if not args.address:
            run_server(args)
        else:
            run_client(args)
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
